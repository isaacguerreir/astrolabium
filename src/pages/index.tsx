import type { NextPage } from "next";
import Link from 'next/link'
import React, { useState, useEffect } from 'react'
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { trpc } from "../utils/trpc";
import { Application, User, Visibility } from '@prisma/client'
import {
  createColumnHelper,
  getCoreRowModel,
  useReactTable,
	flexRender
} from '@tanstack/react-table'

type ApplicationWithAuthor = Application & { author: User }

const Home: NextPage = () => {
  const { isLoading, data } = trpc.apps.all.useQuery() 
  const createAppMutation  = trpc.apps.create.useMutation()

  const createApp = () => {
    createAppMutation.mutate({
      name: "ClothoApp",
      description: "Clotho is an application created years ago by Lattice Automation to build a new infrastructure for connected data model",
      visibility: Visibility.PUBLIC
    })
  }

  return (
    <>
      <Head>
        <title>List of applications</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          List of <span className="text-purple-300">Lattice</span> Apps
        </h1>
				<div>
					<div className="border-2 border-black w-8 h-8 flex items-center justify-center rounded font-bold text-lg">
						<button placeholder="Add an app" onClick={createApp}><h2>+</h2></button>
					</div>
				</div>
        <ul>
          { !isLoading && <AppsTable apps={data} /> }
        </ul>
      </main>
    </>
  );
};

export default Home;

const columnHelper = createColumnHelper<ApplicationWithAuthor>()

const columns = [
  columnHelper.accessor('name', {
		id: 'name',
    header: 'Name',
  }),
  columnHelper.accessor(row => row.author.name, {
		id: 'author',
    header: 'Author',
  }),
  columnHelper.accessor(row => row.description, {
		id: 'description',
    header: 'Description',
  }),
]

const AppsTable = ({ apps }: { apps?: ApplicationWithAuthor[] }) => {
	const [data, setData] = useState<ApplicationWithAuthor[]>([])

	useEffect(() => {
		if (apps) {
			setData(apps)
		}
	}, [apps])

	const table = useReactTable({
		data,
		columns,
		getCoreRowModel: getCoreRowModel()
	})	

	return (
		<div>
			<table>
				<thead>
					<tr>
						{table.getHeaderGroups().map(headerGroup => (
							<tr key={headerGroup.id}>
								{headerGroup.headers.map(header => (
									<th key={header.id} className="p-4">
										{header.isPlaceholder
											? null
											: flexRender(
													header.column.columnDef.header,
													header.getContext()
												)}
									</th>
								))}
							</tr>
						))}
					</tr>
				</thead>
				<tbody>
					<tr>
						{table.getRowModel().rows.map(row => (
							<tr key={row.id}>
								{row.getVisibleCells().map(cell => (
									<td key={cell.id} className="p-4">
										{flexRender(cell.column.columnDef.cell, cell.getContext())}
									</td>
								))}
							</tr>
						))}
					</tr>
				</tbody>
			</table>
		</div>
		
	)
	
}

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();
  console.log(sessionData)

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
